/// <reference types="react" />
import { avatarShape, avatarSize, avatarType, avatarFill, avatarThemeColor } from './Enums';
export default interface AvatarProps {
    /**
     * Sets the Avatar children elements.
     */
    children?: React.ReactNode;
    /**
     * Sets additional CSS styles to the Avatar.
     */
    style?: React.CSSProperties;
    /**
     * Add additional classes to the Avatar.
     */
    className?: string;
    /**
     * Specifies the appearance fill style of the Avatar.
     *
     * The possible values are:
     * * `solid` (Default)
     * * `outline`
     *
     */
    fill?: avatarFill | string;
    /**
     * Set the shape of the Avatar.
     *
     * The supported values are:
     * * (Default) `square`
     * * `circle`
     * * `rounded`
     */
    shape?: avatarShape | string;
    /**
     * Specifies the size of the Avatar
     *
     * The possible values are:
     * * `small`
     * * `medium` (Default)
     * * `large`
     *
     */
    size?: avatarSize | string;
    /**
     * Sets a border to the Avatar.
     */
    border?: boolean;
    /**
     * Set the type of the Avatar.
     *
     * The supported values are:
     * * `image`
     * * `text`
     * * `icon`
     */
    type?: avatarType | string;
    /**
     * Specifies the theme color of the Avatar.
     *
     * The possible values are:
     * * `primary` (Default)&mdash;Applies coloring based on primary theme color.
     * * `secondary`&mdash;Applies coloring based on secondary theme color.
     * * `tertiary`&mdash; Applies coloring based on tertiary theme color.
     * * `info`&mdash;Applies coloring based on info theme color.
     * * `success`&mdash; Applies coloring based on success theme color.
     * * `warning`&mdash; Applies coloring based on warning theme color.
     * * `error`&mdash; Applies coloring based on error theme color.
     * * `dark`&mdash; Applies coloring based on dark theme color.
     * * `light`&mdash; Applies coloring based on light theme color.
     * * `inverse`&mdash; Applies coloring based on inverse theme color.
     * * `inherit`&mdash; Applies inherited coloring value.
     */
    themeColor?: avatarThemeColor | string;
}
